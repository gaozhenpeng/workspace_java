* /pom.xml
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.at</groupId>
        <artifactId>workspace-java</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <groupId>com.at.springboot</groupId>
      <artifactId>spring-boot-cli-scheduler-demo</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>jar</packaging>
      <properties>
         <!--
           start-class with spring-boot-starter-parent
           or define the mainClass property with spring-boot-maven-plugin
         -->
        <spring-boot-maven-plugin.configuration.mainClass>com.at.springboot.cl.Application</spring-boot-maven-plugin.configuration.mainClass>
        <start-class>${spring-boot-maven-plugin.configuration.mainClass}</start-class>
    
        <spring-boot.version>2.1.1.RELEASE</spring-boot.version>
      </properties>
    
      <dependencies>
      
      
      
        <!-- spring boot starter -->
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <!-- hot swapping -->
        <!--
          Default excludes:
              /META-INF/maven
              /META-INF/resources
              /resources
              /static
              /public
              /templates
          User property:
              spring.devtools.restart.exclude=/static/**,/templates/**
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-devtools</artifactId>
          <optional>true</optional>
        </dependency>
        -->
        <!-- log4j2 -->
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
    
        <!-- async log4j2 -->
        <dependency>
          <groupId>com.lmax</groupId>
          <artifactId>disruptor</artifactId>
          <version>3.3.6</version>
        </dependency>
        
        <!-- lombok -->
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
          <scope>provided</scope>
        </dependency>
    
        <!-- test -->
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>${spring-boot.version}</version>
            <scope>import</scope>
            <type>pom</type>
          </dependency>
        </dependencies>
      </dependencyManagement>
    
      <build>
        <plugins>
          <!-- Package as an executable jar -->
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>${spring-boot.version}</version>
            <configuration>
                <!-- main class -->
                <mainClass>${start-class}</mainClass>
                <!-- -Dloader.path=/path/to/classpath -->
                <layout>ZIP</layout>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>repackage</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    
    
    </project>

* /src/main/java/com/at/springboot/cl/Application.java
    package com.at.springboot.cl;
    
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    
    import lombok.extern.slf4j.Slf4j;
    
    @Slf4j
    @SpringBootApplication(scanBasePackages="com.at.springboot")
    public class Application {
        public static void main(String[] args) {
            log.info("spring application main");
            SpringApplication.run(Application.class, args);
        }
    }

* /src/main/java/com/at/springboot/cl/config/SchedulerConfig.java
    package com.at.springboot.cl.config;
    
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.scheduling.TaskScheduler;
    import org.springframework.scheduling.annotation.EnableScheduling;
    import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
    
    @Configuration
    @EnableScheduling // @Scheduled
    public class SchedulerConfig {
    
        /**
         * used by @Schduled as a default TaskScheduler.
         * @return
         */
        @Bean
        public TaskScheduler getTaskScheduler(){
            ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
            scheduler.setPoolSize(Runtime.getRuntime().availableProcessors()); // pool size
            return scheduler;
        }
    
    }

* /src/main/java/com/at/springboot/cl/job/UpdateInstanceTypeJob.java
    package com.at.springboot.cl.job;
    
    import java.security.SecureRandom;
    import java.util.Date;
    
    import org.springframework.scheduling.annotation.Scheduled;
    import org.springframework.stereotype.Component;
    
    import lombok.extern.slf4j.Slf4j;
    
    @Slf4j
    @Component
    public class UpdateInstanceTypeJob {
        private static final SecureRandom secureRandom = new SecureRandom();
    
        private Long var = -1l;
    
        //                 sec min hou day mon wee
        @Scheduled(cron = "*/5   *   *   *   *   *")
        public void doUpdate() throws InterruptedException{
            log.info("start doUpdate.");
            Date start = new Date();
    
            long tid = Thread.currentThread().getId();
    
            log.debug("I'm a job. TID:" + tid);
    
    
            long sleepMS = secureRandom.nextInt(5000);
            var = sleepMS;
            log.debug("I'm going to sleep " + sleepMS + "(ms)");
    
            Thread.currentThread().sleep(sleepMS);
    
            log.debug("I'm leaving. TID:" + tid);
    
            Date end = new Date();
            Long interval = end.getTime() - start.getTime();
            end = null;
            start = null;
            log.info("end doUpdate." + interval);
        }
    
        //                 sec min hou day mon wee
        @Scheduled(cron = "${com.at.cli.job.crontab}")
        public void doUpdate_parameterized() throws InterruptedException{
            log.info("start doUpdate_parameterized.");
            log.info("end doUpdate_parameterized.");
        }
    
    
        public Long getVar(){
            return var;
        }
    }

* /src/main/resources/application.properties
    ##                                       sec min hou day mon wee
    com.at.cli.job.crontab = */5 *   *   *   *   *

* /src/main/resources/log4j2.xml

