<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.at</groupId>
		<artifactId>workspace-java</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
    <groupId>com.at</groupId>
    <artifactId>sqlite</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.8.7</version>
            <!--
                Do not include sqlite-jdbc-(version).jar in
                WEB-INF/lib folder of your web application package,
                since multiple web applications hosted by the same
                Tomcat server cannot load the sqlite-jdbc native
                library more than once. That is the specification of
                JNI (Java Native Interface). You will observe
                UnsatisfiedLinkError exception with the message "no
                SQLite library found".

                Work-around of this problem is to put
                sqlite-jdbc-(version).jar file into (TOMCAT_HOME)/lib
                direcotry, in which multiple web applications can
                share the same native library file (.dll, .jnilib,
                .so) extracted from this sqlite-jdbc jar file.

                If you are using Maven for your web application, set
                the dependency scope as 'provided', and manually put
                the SQLite JDBC jar file into (TOMCAT_HOME)/lib
                folder.
            -->
            <scope>provided</scope>
        </dependency>
    </dependencies>
</project>
